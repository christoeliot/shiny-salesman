readRDS('cities.rds')
library(readr)
readxl::read_excel('NAT PARKS.xlsx')
readxl::read_excel('data/NAT PARKS.xlsx')
?reactiveValues()
library(maps)
?maps
map("northamerica")
map("north america")
map("north_america")
help("map.scale")
helps(map())
help("map")
map('world')
map('usa')
map("world", col="#f3f3f3", fill=TRUE, lwd=0.2, mar=margins)
help(package = 'maps')
map('state.carto', fill = TRUE, col = palette())
map('canada')
map.cities('canada.cities')
map(canada')
map(canada.cities)
/
q
;
<- g
gsdfgasdfgad
>
> h <- g
library(maps)
map.cities()
map.cities(canada.cities)
g <- map.cities(canada.cities)
map(g)
library(readxl)
if (!exists('nat_parks')) nat_parks = read_excel('data/NAT PARKS.xlsx')
candidates <- nat_parks
cities = candidates[sample(nrow(candidates), 1),]
View(cities)
i = 0
while (nrow(cities) < n & i < nrow(all_cities)) {
candidate = candidates[sample(nrow(candidates), 1),]
candidate_dist_matrix = distm(rbind(cities, candidate)[, c("long", "lat")]) * miles_per_meter
if (min(candidate_dist_matrix[candidate_dist_matrix > 0]) > min_dist) {
cities = rbind(cities, candidate)
candidates = subset(candidates, !(candidates$full.name %in% cities$full.name))
}
i = i + 1
}
n = 10
while (nrow(cities) < n & i < nrow(all_cities)) {
candidate = candidates[sample(nrow(candidates), 1),]
candidate_dist_matrix = distm(rbind(cities, candidate)[, c("long", "lat")]) * miles_per_meter
if (min(candidate_dist_matrix[candidate_dist_matrix > 0]) > min_dist) {
cities = rbind(cities, candidate)
candidates = subset(candidates, !(candidates$full.name %in% cities$full.name))
}
i = i + 1
}
while (nrow(cities) < n & i < nrow(candidates)) {
candidate = candidates[sample(nrow(candidates), 1),]
candidate_dist_matrix = distm(rbind(cities, candidate)[, c("long", "lat")]) * miles_per_meter
if (min(candidate_dist_matrix[candidate_dist_matrix > 0]) > min_dist) {
cities = rbind(cities, candidate)
candidates = subset(candidates, !(candidates$full.name %in% cities$full.name))
}
i = i + 1
}
help(distm)
View(nat_parks)
colnames(nat_parks) <- c('id', 'park', 'state', 'country', 'lat', 'long')
generate_random_cities = function(n = 10, min_dist = 250) { #, usa_only=FALSE) {
#  if (usa_only) {
#    candidates = usa_cities
#  } else {
#    candidates = all_cities
#  }
candidates <- nat_parks
cities = candidates[sample(nrow(candidates), 1),]
candidates = subset(candidates, !(full.name %in% cities$full.name))
i = 0
n = 10
while (nrow(cities) < n & i < nrow(candidates)) {
candidate = candidates[sample(nrow(candidates), 1),]
candidate_dist_matrix = distm(rbind(cities, candidate)[, c("long", "lat")]) * miles_per_meter
if (min(candidate_dist_matrix[candidate_dist_matrix > 0]) > min_dist) {
cities = rbind(cities, candidate)
candidates = subset(candidates, !(candidates$full.name %in% cities$full.name))
}
i = i + 1
}
cities = cities[order(cities$full.name),]
cities$n = 1:nrow(cities)
return(cities)
}
View(cities)
View(generate_random_cities)
generate_random_cities()
View(nat_parks)
candidates <- nat_parks
cities = candidates[sample(nrow(candidates), 1),]
candidates = subset(candidates, !(park %in% cities$park))
i = 0
n = 10
while (nrow(cities) < n & i < nrow(candidates)) {
candidate = candidates[sample(nrow(candidates), 1),]
candidate_dist_matrix = distm(rbind(cities, candidate)[, c("long", "lat")]) * miles_per_meter
if (min(candidate_dist_matrix[candidate_dist_matrix > 0]) > min_dist) {
cities = rbind(cities, candidate)
candidates = subset(candidates, !(candidates$full.name %in% cities$full.name))
}
i = i + 1
}
install.packages("geosphere")
library(geosphere)
if (!exists('nat_parks')) nat_parks = read_excel('data/NAT PARKS.xlsx')
colnames(nat_parks) <- c('id', 'park', 'state', 'country', 'lat', 'long')
library(readxl)
if (!exists('nat_parks')) nat_parks = read_excel('data/NAT PARKS.xlsx')
colnames(nat_parks) <- c('id', 'park', 'state', 'country', 'lat', 'long')
candidates <- nat_parks
cities = candidates[sample(nrow(candidates), 1),]
candidates = subset(candidates, !(park %in% cities$park))
i = 0
n = 10
while (nrow(cities) < n & i < nrow(candidates)) {
candidate = candidates[sample(nrow(candidates), 1),]
candidate_dist_matrix = distm(rbind(cities, candidate)[, c("long", "lat")]) * miles_per_meter
if (min(candidate_dist_matrix[candidate_dist_matrix > 0]) > min_dist) {
cities = rbind(cities, candidate)
candidates = subset(candidates, !(candidates$full.name %in% cities$full.name))
}
i = i + 1
}
help("distm")
help("distHaversine")
